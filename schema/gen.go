// Package schema provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version 2.4.0 DO NOT EDIT.
package schema

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AppointmentStatus.
const (
	Confirmed AppointmentStatus = "confirmed"
	Reserved  AppointmentStatus = "reserved"
)

// Appointment defines model for Appointment.
type Appointment struct {
	ClientId   *openapi_types.UUID `json:"client_id,omitempty"`
	EndTime    *time.Time          `json:"end_time,omitempty"`
	Id         *openapi_types.UUID `json:"id,omitempty"`
	ProviderId *openapi_types.UUID `json:"provider_id,omitempty"`
	StartTime  *time.Time          `json:"start_time,omitempty"`
	Status     *AppointmentStatus  `json:"status,omitempty"`
}

// AppointmentStatus defines model for Appointment.Status.
type AppointmentStatus string

// Availability defines model for Availability.
type Availability struct {
	EndTime    *time.Time          `json:"end_time,omitempty"`
	ProviderId *openapi_types.UUID `json:"provider_id,omitempty"`
	StartTime  *time.Time          `json:"start_time,omitempty"`
}

// Client defines model for Client.
type Client struct {
	Id   *openapi_types.UUID `json:"id,omitempty"`
	Name *string             `json:"name,omitempty"`
}

// CreateClientRequest defines model for CreateClientRequest.
type CreateClientRequest struct {
	Name string `json:"name"`
}

// CreateProviderRequest defines model for CreateProviderRequest.
type CreateProviderRequest struct {
	Name string `json:"name"`
}

// Provider defines model for Provider.
type Provider struct {
	Id   *openapi_types.UUID `json:"id,omitempty"`
	Name *string             `json:"name,omitempty"`
}

// GetAppointmentsParams defines parameters for GetAppointments.
type GetAppointmentsParams struct {
	ProviderID *openapi_types.UUID `form:"providerID,omitempty" json:"providerID,omitempty"`
	Date       *openapi_types.Date `form:"date,omitempty" json:"date,omitempty"`
}

// PostAppointmentsJSONBody defines parameters for PostAppointments.
type PostAppointmentsJSONBody struct {
	AvailabilityId *openapi_types.UUID `json:"availability_id,omitempty"`
	ClientId       *openapi_types.UUID `json:"client_id,omitempty"`
	ProviderId     *openapi_types.UUID `json:"provider_id,omitempty"`
}

// PostAppointmentsJSONRequestBody defines body for PostAppointments for application/json ContentType.
type PostAppointmentsJSONRequestBody PostAppointmentsJSONBody

// PostClientsJSONRequestBody defines body for PostClients for application/json ContentType.
type PostClientsJSONRequestBody = CreateClientRequest

// PostProvidersJSONRequestBody defines body for PostProviders for application/json ContentType.
type PostProvidersJSONRequestBody = CreateProviderRequest

// PostProvidersAvailabilityJSONRequestBody defines body for PostProvidersAvailability for application/json ContentType.
type PostProvidersAvailabilityJSONRequestBody = Availability

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get available appointment slots
	// (GET /appointments)
	GetAppointments(c *gin.Context, params GetAppointmentsParams)
	// Reserve an appointment slot
	// (POST /appointments)
	PostAppointments(c *gin.Context)
	// Confirm a reservation
	// (POST /appointments/{appointmentID}/confirm)
	PostAppointmentsAppointmentIDConfirm(c *gin.Context, appointmentID openapi_types.UUID)
	// Create a new client
	// (POST /clients)
	PostClients(c *gin.Context)
	// Get client details
	// (GET /clients/{clientID})
	GetClientsClientID(c *gin.Context, clientID openapi_types.UUID)
	// Create a new provider
	// (POST /providers)
	PostProviders(c *gin.Context)
	// Submit provider availability
	// (POST /providers/availability)
	PostProvidersAvailability(c *gin.Context)
	// Get provider details
	// (GET /providers/{providerID})
	GetProvidersProviderID(c *gin.Context, providerID openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAppointments operation middleware
func (siw *ServerInterfaceWrapper) GetAppointments(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAppointmentsParams

	// ------------- Optional query parameter "providerID" -------------

	err = runtime.BindQueryParameter("form", true, false, "providerID", c.Request.URL.Query(), &params.ProviderID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter providerID: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "date" -------------

	err = runtime.BindQueryParameter("form", true, false, "date", c.Request.URL.Query(), &params.Date)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter date: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAppointments(c, params)
}

// PostAppointments operation middleware
func (siw *ServerInterfaceWrapper) PostAppointments(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAppointments(c)
}

// PostAppointmentsAppointmentIDConfirm operation middleware
func (siw *ServerInterfaceWrapper) PostAppointmentsAppointmentIDConfirm(c *gin.Context) {

	var err error

	// ------------- Path parameter "appointmentID" -------------
	var appointmentID openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "appointmentID", c.Param("appointmentID"), &appointmentID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter appointmentID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAppointmentsAppointmentIDConfirm(c, appointmentID)
}

// PostClients operation middleware
func (siw *ServerInterfaceWrapper) PostClients(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostClients(c)
}

// GetClientsClientID operation middleware
func (siw *ServerInterfaceWrapper) GetClientsClientID(c *gin.Context) {

	var err error

	// ------------- Path parameter "clientID" -------------
	var clientID openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "clientID", c.Param("clientID"), &clientID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter clientID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetClientsClientID(c, clientID)
}

// PostProviders operation middleware
func (siw *ServerInterfaceWrapper) PostProviders(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostProviders(c)
}

// PostProvidersAvailability operation middleware
func (siw *ServerInterfaceWrapper) PostProvidersAvailability(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostProvidersAvailability(c)
}

// GetProvidersProviderID operation middleware
func (siw *ServerInterfaceWrapper) GetProvidersProviderID(c *gin.Context) {

	var err error

	// ------------- Path parameter "providerID" -------------
	var providerID openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "providerID", c.Param("providerID"), &providerID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter providerID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProvidersProviderID(c, providerID)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/appointments", wrapper.GetAppointments)
	router.POST(options.BaseURL+"/appointments", wrapper.PostAppointments)
	router.POST(options.BaseURL+"/appointments/:appointmentID/confirm", wrapper.PostAppointmentsAppointmentIDConfirm)
	router.POST(options.BaseURL+"/clients", wrapper.PostClients)
	router.GET(options.BaseURL+"/clients/:clientID", wrapper.GetClientsClientID)
	router.POST(options.BaseURL+"/providers", wrapper.PostProviders)
	router.POST(options.BaseURL+"/providers/availability", wrapper.PostProvidersAvailability)
	router.GET(options.BaseURL+"/providers/:providerID", wrapper.GetProvidersProviderID)
}
